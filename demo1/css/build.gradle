import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"
apply plugin: "war"
apply plugin: "tomcat"

version = '1.0'
def warfilename = 'sdm.war'

//jar {
//    manifest {
//        attributes 'Implementation-Title': 'RMS', 'Implementation-Version': version
//    }
//}

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://download.java.net/maven/2"
    }
    maven { url 'http://repo.spring.io/plugins-release' }
  }

  dependencies {
    classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4'
  }
}

repositories {
  jcenter {
        url "http://jcenter.bintray.com/"
    }
  mavenCentral()
  maven { url 'http://repo.spring.io/milestone/'}
  maven { url "http://repo1.maven.org/maven2"}
}

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

dependencies {
    def tomcatVersion = '7.0.42'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
      exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

	compile 'org.springframework:spring-context:4.2.4.RELEASE'
    compile 'org.springframework:spring-context-support:4.2.4.RELEASE'
    compile 'org.springframework:spring-webmvc:4.2.4.RELEASE'
    compile 'org.springframework:spring-websocket:4.2.4.RELEASE'
    compile 'org.springframework:spring-messaging:4.2.4.RELEASE'
    
    compile 'org.springframework.security:spring-security-web:4.0.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.0.3.RELEASE'
    compile 'org.springframework.security:spring-security-ldap:4.0.3.RELEASE'
    compile 'org.springframework.security:spring-security-aspects:4.0.3.RELEASE'
    
    
    compile 'org.springframework:spring-orm:4.1.0.RELEASE'
    compile 'org.hibernate:hibernate-core:4.2.11.Final'
    compile 'org.apache.commons:commons-dbcp2:2.0'
    compile 'jstl:jstl:1.2'
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    compile 'org.elasticsearch:elasticsearch:0.19.9'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.1'
     compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.1'
    
    //Pano code migration for backup/restore
    //compile 'jcifs:jcifs:1.3.17'
    compile 'commons-codec:commons-codec:1.4'
    compile 'org.jdom:jdom:2.0.2'
    
    // Note: Somehow using HV 5.x is not running the @Valid test
    // cases with MockMvc. So switching to HV 4.3. Using 4.1 caused
    // issues with tomcatRun gradle task.
    compile 'org.hibernate:hibernate-validator:4.3.0.Final'
    //    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    
//	compile 'org.slf4j:slf4j-api:1.7.7'
//  compile 'org.slf4j:slf4j-jdk14:1.7.7'

	compile 'com.github.briandilley.jsonrpc4j:jsonrpc4j:1.1'
	compile 'org.apache.commons:commons-lang3:3.0'
	compile 'commons-net:commons-net:3.3'
	compile 'org.apache.httpcomponents:httpclient:4.4'
	compile 'org.apache.httpcomponents:httpcore-nio:4.4'
	

	compile ('jcifs:jcifs:1.3.17'){
        exclude group: 'javax.servlet'
    }
	
    compile 'org.quartz-scheduler:quartz:2.2.1'
	compile 'com.google.guava:guava:12.0'
    compile "commons-io:commons-io:+"
    compile "com.mangofactory:swagger-springmvc:0.9.4"
	compile 'net.sf.jpam:jpam:1.1'
	compile 'org.jgroups:jgroups:2.12.3.Final'
    compile 'javax.mail:mail:1.4'
	compile 'org.rauschig:jarchivelib:0.7.0'
	 
    compile 'org.eclipse.persistence:eclipselink:2.5.0-RC1'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-jdk14:1.7.7'
    
    compile 'org.jasypt:jasypt-hibernate4:1.9.2'
    
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    testCompile 'org.springframework:spring-test:4.1.0.RELEASE'
    //Commenting this because powermock causing problem as power mock uses mokito
    //testCompile "org.mockito:mockito-core:1.+"
    testCompile 'com.github.tomakehurst:wiremock:1.53'
    testCompile 'junit:junit:4.11'
    // Note: Hamcrest does not seem to work with later version of json-path i.e. 1.2.
	// so using 0.9.1
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.unboundid:unboundid-ldapsdk:2.3.6'
    testCompile 'dumbster:dumbster:1.6'
    testCompile 'org.powermock:powermock-mockito-release-full:1.6.2'

}


war {
	//it.dependsOn 'generateVersion'
	archiveName "${warfilename}"
    //webInf{
    //    from('src/main/java/com/samsung/rms/core/domain/jsonrpc/messages/v1/profile') {
    //        include 'jaxb.properties'
    //        into('classes/com/samsung/rms/core/domain/jsonrpc/messages/v1/profile/')
    //    }
    //}
}

test {
	//testLogging.showStandardStreams = true
	maxHeapSize = "1024m"
	minHeapSize = "512m"
}

tomcat {
	httpPort = 8090
    stopPort = 8092
}

tomcatRun.outputFile = file('tomcat.log')

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

def distDir = new File('build/dist')
def distWebappDir = new File('build/dist/samsung/webapps')
def distSamsungDir = new File('build/dist/samsung')
def distScriptsDir = new File('build/dist/samsung/scripts')
def distConsoleUiDir = new File('build/dist/samsung/webapps/app')


task appDist(dependsOn: 'build') << {
	delete 'build/dist'
	distWebappDir.mkdirs()
	copy {
      from "build/libs/${warfilename}"
      into "${distWebappDir}"
   	}
   	copy {
      from "../console/app"
      into "${distConsoleUiDir}"
   	}
   	copy {
      from "deliverables/scripts"
      into "${distScriptsDir}"
   	}
   	
   	ant.zip(destfile: 'build/dist/samsung.zip') {
        fileset(dir: 'build/dist') {
            include(name: '**/*')
        }
    }
}

afterEvaluate {
	configure(processResources) {
		ext.buildNo = System.getenv()['P4_CHANGELIST'] ? System.getenv()['P4_CHANGELIST'] : '0'
		filter(ReplaceTokens, tokens: [product_version: '1.0.0.' + buildNo])
	}
}

//task generateVersion {
    // this gets executed in the configuration phase of the build.
//	it.dependsOn 'processResources'
//} << {
	// this gets executed in the execution phase of the build.
//	println 'generating version file'
//	file('build/resources/main/revision.properties').text = version + '.' + System.getenv()['P4_CHANGELIST']
//	println 'version file generated'
//}

